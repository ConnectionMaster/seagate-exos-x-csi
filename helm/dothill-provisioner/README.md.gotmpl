{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

## ðŸ“œ Using the Chart

### Installing the Chart

Create a file named `{{ template "chart.name" . }}.values.yaml` with your values, with the help of [Chart Values](#values).

Add our Charts repository:
```
$ helm repo add enix https://charts.enix.io
```

Install the {{ template "chart.name" . }} with release name `{{ template "chart.name" . }}` in the `dothill-system` namespace:
```
$ helm install -n dothill-system {{ template "chart.name" . }} enix/{{ template "chart.name" . }} --values {{ template "chart.name" . }}.values.yaml
```

The `upgrade` command is used to change configuration when values are modified:
```
$ helm upgrade -n dothill-system {{ template "chart.name" . }} enix/{{ template "chart.name" . }} --values {{ template "chart.name" . }}.values.yaml
```

### Upgrading the Chart

Update Helm repositories:
```
$ helm repo update
```

Upgrade release names `{{ template "chart.name" . }}` to the latest version:
```
$ helm upgrade {{ template "chart.name" . }} enix/{{ template "chart.name" . }}
```

### Creating a storage class

In order to dynamically provision persistants volumes, you first need to create a storage class:

```yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
provisioner: dothill.csi.enix.io # Required for the plugin to recognize this storage class as handled by itself.
volumeBindingMode: WaitForFirstConsumer # Prefer this value to avoid unschedulable pods (https://kubernetes.io/docs/concepts/storage/storage-classes/#volume-binding-mode)
metadata:
  name: my-marvelous-storage # Choose the name that fits the best with your StorageClass.
parameters:
  # Secrets name and namespace, they can be the same for provisioner, controller-publish and controller-expand sections.
  csi.storage.k8s.io/provisioner-secret-name: dothill-api
  csi.storage.k8s.io/provisioner-secret-namespace: dothill-system
  csi.storage.k8s.io/controller-publish-secret-name: dothill-api
  csi.storage.k8s.io/controller-publish-secret-namespace: dothill-system
  csi.storage.k8s.io/controller-expand-secret-name: dothill-api
  csi.storage.k8s.io/controller-expand-secret-namespace: dothill-system
  fsType: ext4 # Desired filesystem
  iqn: iqn.2015-11.com.hpe:storage.msa2050.2002518b4c # Appliance IQN
  pool: A # Pool to use on the IQN to provision volumes
  portals: 10.0.0.24,10.0.0.25 # Comma separated list of portal ips. (One per controller should be enough).
```

And the associated secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: dothill-api
  namespace: dothill-system
type: Opaque
data:
  apiAddress: {{ "https://10.0.0.42" | b64enc }} # base64 encoded api address
  username: {{ "john.doe" | b64enc }} # base64 encoded username
  password: {{ "my-S@fe+passw0rd!" | b64enc }} # base64 encoded password
```

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}
